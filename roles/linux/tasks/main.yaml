---
# TODO: linux confi
# TODO: install packages

# Installar o node para poder instalar as linter do Mason
- name: Adicionar repositório NodeSource para Node.js 18.x
  ansible.builtin.shell: |
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
  args:
    executable: /bin/bash

# adicionar o repositorio do nvim
- name: Adicionar o PPA oficial do Neovim
  ansible.builtin.apt_repository:
    repo: ppa:neovim-ppa/unstable
    state: present
    update_cache: true

# Update repostorio
- name: Update apt
  ansible.builtin.apt:
    update_cache: true
    force_apt_get: true
    cache_valid_time: 3600

# Remover versão antiga nvim
- name: Remover a versão antiga nvim
  ansible.builtin.package:
    name: neovim
    state: absent

# Instala os pacotes necessarios
- name: Install packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - wget
    - fontconfig
    - neovim
    - git
    - stow
    - tar
    - tmux
    - ripgrep
    - zsh
    - bat
    - zoxide
    - unzip
    - software-properties-common
    - build-essential
    - eza
    - golang-go
    - npm
    - nodejs
    - locales
    - make
    - python3
    - python3-pip
    - python3-apt

- name: Garantir que o python3-venv está instalado
  ansible.builtin.package:
    name: python3-venv
    state: present

- name: Criar ambiente virtual para Python
  ansible.builtin.command: python3 -m venv {{ venv_path }}
  args:
    creates: "{{ venv_path }}"

- name: Atualizar pip, setuptools e wheel no venv
  ansible.builtin.pip:
    name:
      - pip
      - setuptools
      - wheel
    state: latest
    virtualenv: "{{ venv_path }}"

- name: Instalar o isort no ambiente virtual
  pip:
    name: isort
    state: latest
    virtualenv: "{{ venv_path }}"

# Configurar o locale para en_us (fzf dependencies)
- name: Configurar locale para en_US.UTF-8
  ansible.builtin.command: locale-gen en_US.UTF-8
  args:
    creates: /usr/lib/locale/en_US.utf8

# Definir locale como padrao (fzf dependencies)
- name: Definir locale padrão no sistema
  ansible.builtin.lineinfile:
    path: /etc/default/locale
    line: "{{ item }}"
    create: true
  loop:
    - "LANG=en_US.UTF-8"
    - "LANGUAGE=en_US.UTF-8"
    - "LC_ALL=en_US.UTF-8"

# Aplicar configurações do locale (fzf dependencies)
- name: Aplicar configurações de locale
  ansible.builtin.command: update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8
  when: ansible_os_family == 'Debian'

# Recarregar o locale (fzf dependencies)
- name: Recarregar locale
  ansible.builtin.shell: source /etc/default/locale
  args:
    executable: /bin/bash

# TODO: clone dotfiles repository

# Clonar repositorio dotfiles
- name: Clonar repositório dotfiles
  ansible.builtin.git:
    repo: https://github.com/saadmarcelo/dotfiles.git
    dest: /home/{{ ansible_user }}/dotfiles/
    update: true
  become: false

# Mudar para o zsh
- name: Definir o zsh como shell padrao do usuário
  ansible.builtin.command: chsh -s /bin/zsh {{ ansible_user }}

# Garantir que o zsh esta no /etc/shells
- name: Garantir que o zsh esta no /etc/shells
  ansible.builtin.lineinfile:
    path: /etc/shells
    line: /bin/zsh
    state: present

# Verifica o shell atual
- name: Verificar o shell atual
  ansible.builtin.command: echo $SHELL
  register: current_shell

# Exibir o shell
- name: Exibir o shell atual
  ansible.builtin.debug:
    msg: "shell atual: {{ current_shell.stdout }}"

# TODO: oh my zsh config

# Download oh my zsh script
- name: Download Oh My Zsh installation script
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
    dest: /tmp/install_ohmyzsh.sh

# Define lista de usuarios a serem instalados
- name: Define list of users
  ansible.builtin.set_fact:
    users:
      - { name: "{{ ansible_user }}", home: "/home/{{ ansible_user }}" }
      - { name: "root", home: "/root" }

# Check se oh my zsh ja esta instalado
- name: Check if Oh My Zsh is already installed
  ansible.builtin.stat:
    path: "{{ item.home }}/.oh-my-zsh"
  register: ohmyzsh_status
  loop: "{{ users }}"

# Install Oh My Zsh for each user
- name: Install Oh My Zsh for users
  ansible.builtin.shell: |
    export HOME={{ item.home }}
    export USER={{ item.name }}
    sh /tmp/install_ohmyzsh.sh --unattended
  args:
    executable: /bin/bash
  loop: "{{ users }}"
  become_user: "{{ item.name }}"
  environment:
    ZSH: "{{ item.home }}/.oh-my-zsh"
  when: not (ohmyzsh_status.results | selectattr('item.name', 'equalto', item.name) | first).stat.exists

# Clone zsh-autosuggestions plugin
- name: Clone zsh-autosuggestions plugin
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-autosuggestions
    dest: "{{ item.home }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    depth: 1
  loop: "{{ users }}"
  become: true

# Clone zsh-completions plugin
- name: Clone zsh-completions plugin
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-completions
    dest: "{{ item.home }}/.oh-my-zsh/custom/plugins/zsh-completions"
    depth: 1
  loop: "{{ users }}"
  become: true

# Clone zsh-syntax-highlighting plugin
- name: Clone zsh-syntax-highlighting plugin
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
    dest: "{{ item.home }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    depth: 1
  loop: "{{ users }}"
  become: true

# Set zsh as default shell for each user
- name: Set zsh as default shell
  ansible.builtin.shell: chsh -s $(which zsh) {{ item }}
  loop:
    - "{{ ansible_user }}"
    - root

# Criar um link simbolico para o bat
- name: Criar link simbolico para o bat
  ansible.builtin.file:
    src: /usr/bin/batcat
    dest: /usr/bin/bat
    state: link

# TODO: install font

# Download saucedcodepro font
- name: Baixar SauceCodePro Nerd Font
  ansible.builtin.get_url:
    url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/SourceCodePro.zip
    dest: /tmp/SourceCodePro.zip

# Unzip font file
- name: Descompactar o arquivo da fonte
  ansible.builtin.unarchive:
    src: /tmp/SourceCodePro.zip
    dest: /usr/local/share/fonts
    remote_src: true

# update font cache
- name: Atualizar cache de fontes
  ansible.builtin.command: fc-cache -fv

# Remove ZIP file
- name: Remover o arquivo ZIP
  ansible.builtin.file:
    path: /tmp/SourceCodePro.zip
    state: absent

# TODO: tmux config

# Create .tmux folder
- name: Create .tmux folder
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/.tmux/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory
    mode: "0755"

# Download TPM plugin
- name: Download TPM plugin
  ansible.builtin.git:
    repo: https://github.com/tmux-plugins/tpm.git
    dest: /home/{{ ansible_user }}/.tmux/plugins/tpm
    update: true
  become: false

# Garantir permissao de execucao do scritp de instalcao dos plugins do tmux
- name: Garantir permissão de execução para o script install_plugins
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/.tmux/plugins/tpm/bin/install_plugins
    mode: "0755"
    state: file
  become: false

# Instalar plugins do Tmux
- name: Instalar plugins do Tmux
  ansible.builtin.shell: /home/{{ ansible_user }}/.tmux/plugins/tpm/bin/install_plugins
  args:
    executable: /bin/bash
  environment:
    TMUX_PLUGIN_MANAGER_PATH: /home/{{ ansible_user }}/.tmux/plugins
    HOME: /home/{{ ansible_user }}
    USER: "{{ ansible_user }}"
  become: false

# Instalar o fzf
- name: Instalar o fzf
  ansible.builtin.unarchive:
    src: https://github.com/junegunn/fzf/releases/download/v0.57.0/fzf-0.57.0-linux_amd64.tar.gz
    dest: /usr/bin/
    remote_src: true

# TODO: stow config

- name: Remover ou renomear .zshrc existente
  ansible.builtin.shell: |
    if [ -f {{ item.user }}/.zshrc ] && [ ! -L {{ item.user }}/.zshrc ]; then
      mv {{ item.user }}/.zshrc {{ item.user }}/.zshrc.bak
    fi
  become_user: "{{ 'root' if item.user == '/root' else ansible_user }}"
  loop:
    - { user: "/home/{{ ansible_user }}" }
    - { user: "/root" }

# Criar os links simbolicos com o stow
- name: Criar os links simbólicos com o stow para ansible_user e root
  ansible.builtin.shell: stow -R -d /home/{{ ansible_user }}/dotfiles -t {{ item.user }}/ {{ item.config }}
  become: true
  become_user: "{{ 'root' if item.user == '/root' else ansible_user }}"
  args:
    executable: /bin/bash
  loop:
    - { user: "/home/{{ ansible_user }}", config: "tmux" }
    - { user: "/home/{{ ansible_user }}", config: "nvim" }
    - { user: "/home/{{ ansible_user }}", config: "zshrc" }
    - { user: "/root", config: "tmux" }
    - { user: "/root", config: "nvim" }
    - { user: "/root", config: "zshrc" }
